//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace trofeoCazador.ServicioDelJuego {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JugadorDataContract", Namespace="http://schemas.datacontract.org/2004/07/ServicioJuego")]
    [System.SerializableAttribute()]
    public partial class JugadorDataContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContraseniaHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CorreoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int JugadorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NombreUsuarioField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumeroFotoPerfilField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContraseniaHash {
            get {
                return this.ContraseniaHashField;
            }
            set {
                if ((object.ReferenceEquals(this.ContraseniaHashField, value) != true)) {
                    this.ContraseniaHashField = value;
                    this.RaisePropertyChanged("ContraseniaHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Correo {
            get {
                return this.CorreoField;
            }
            set {
                if ((object.ReferenceEquals(this.CorreoField, value) != true)) {
                    this.CorreoField = value;
                    this.RaisePropertyChanged("Correo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int JugadorId {
            get {
                return this.JugadorIdField;
            }
            set {
                if ((this.JugadorIdField.Equals(value) != true)) {
                    this.JugadorIdField = value;
                    this.RaisePropertyChanged("JugadorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NombreUsuario {
            get {
                return this.NombreUsuarioField;
            }
            set {
                if ((object.ReferenceEquals(this.NombreUsuarioField, value) != true)) {
                    this.NombreUsuarioField = value;
                    this.RaisePropertyChanged("NombreUsuario");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumeroFotoPerfil {
            get {
                return this.NumeroFotoPerfilField;
            }
            set {
                if ((this.NumeroFotoPerfilField.Equals(value) != true)) {
                    this.NumeroFotoPerfilField = value;
                    this.RaisePropertyChanged("NumeroFotoPerfil");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LobbyPlayer", Namespace="http://schemas.datacontract.org/2004/07/ServicioJuego")]
    [System.SerializableAttribute()]
    public partial class LobbyPlayer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumeroFotoPerfilField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumeroFotoPerfil {
            get {
                return this.NumeroFotoPerfilField;
            }
            set {
                if ((this.NumeroFotoPerfilField.Equals(value) != true)) {
                    this.NumeroFotoPerfilField = value;
                    this.RaisePropertyChanged("NumeroFotoPerfil");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioDelJuego.IGestionCuentaServicio")]
    public interface IGestionCuentaServicio {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestionCuentaServicio/AgregarJugador", ReplyAction="http://tempuri.org/IGestionCuentaServicio/AgregarJugadorResponse")]
        bool AgregarJugador(trofeoCazador.ServicioDelJuego.JugadorDataContract jugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestionCuentaServicio/AgregarJugador", ReplyAction="http://tempuri.org/IGestionCuentaServicio/AgregarJugadorResponse")]
        System.Threading.Tasks.Task<bool> AgregarJugadorAsync(trofeoCazador.ServicioDelJuego.JugadorDataContract jugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestionCuentaServicio/EditarContraseña", ReplyAction="http://tempuri.org/IGestionCuentaServicio/EditarContraseñaResponse")]
        bool EditarContraseña(string correo, string nuevaContraseña);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestionCuentaServicio/EditarContraseña", ReplyAction="http://tempuri.org/IGestionCuentaServicio/EditarContraseñaResponse")]
        System.Threading.Tasks.Task<bool> EditarContraseñaAsync(string correo, string nuevaContraseña);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestionCuentaServicio/ValidarInicioSesion", ReplyAction="http://tempuri.org/IGestionCuentaServicio/ValidarInicioSesionResponse")]
        trofeoCazador.ServicioDelJuego.JugadorDataContract ValidarInicioSesion(string nombreUsuario, string contraseniaHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestionCuentaServicio/ValidarInicioSesion", ReplyAction="http://tempuri.org/IGestionCuentaServicio/ValidarInicioSesionResponse")]
        System.Threading.Tasks.Task<trofeoCazador.ServicioDelJuego.JugadorDataContract> ValidarInicioSesionAsync(string nombreUsuario, string contraseniaHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestionCuentaServicio/ObtenerJugador", ReplyAction="http://tempuri.org/IGestionCuentaServicio/ObtenerJugadorResponse")]
        trofeoCazador.ServicioDelJuego.JugadorDataContract ObtenerJugador(int idJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestionCuentaServicio/ObtenerJugador", ReplyAction="http://tempuri.org/IGestionCuentaServicio/ObtenerJugadorResponse")]
        System.Threading.Tasks.Task<trofeoCazador.ServicioDelJuego.JugadorDataContract> ObtenerJugadorAsync(int idJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestionCuentaServicio/EditarNombreUsuario", ReplyAction="http://tempuri.org/IGestionCuentaServicio/EditarNombreUsuarioResponse")]
        bool EditarNombreUsuario(int idJugador, string nuevoNombreUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestionCuentaServicio/EditarNombreUsuario", ReplyAction="http://tempuri.org/IGestionCuentaServicio/EditarNombreUsuarioResponse")]
        System.Threading.Tasks.Task<bool> EditarNombreUsuarioAsync(int idJugador, string nuevoNombreUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestionCuentaServicio/EditarCorreo", ReplyAction="http://tempuri.org/IGestionCuentaServicio/EditarCorreoResponse")]
        bool EditarCorreo(int idCuenta, string nuevoCorreo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestionCuentaServicio/EditarCorreo", ReplyAction="http://tempuri.org/IGestionCuentaServicio/EditarCorreoResponse")]
        System.Threading.Tasks.Task<bool> EditarCorreoAsync(int idCuenta, string nuevoCorreo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestionCuentaServicio/EnviarCodigoConfirmacion", ReplyAction="http://tempuri.org/IGestionCuentaServicio/EnviarCodigoConfirmacionResponse")]
        string EnviarCodigoConfirmacion(string correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestionCuentaServicio/EnviarCodigoConfirmacion", ReplyAction="http://tempuri.org/IGestionCuentaServicio/EnviarCodigoConfirmacionResponse")]
        System.Threading.Tasks.Task<string> EnviarCodigoConfirmacionAsync(string correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestionCuentaServicio/ValidarCodigo", ReplyAction="http://tempuri.org/IGestionCuentaServicio/ValidarCodigoResponse")]
        bool ValidarCodigo(string codigoIngresado, string codigoEnviado);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestionCuentaServicio/ValidarCodigo", ReplyAction="http://tempuri.org/IGestionCuentaServicio/ValidarCodigoResponse")]
        System.Threading.Tasks.Task<bool> ValidarCodigoAsync(string codigoIngresado, string codigoEnviado);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestionCuentaServicio/ExisteCorreo", ReplyAction="http://tempuri.org/IGestionCuentaServicio/ExisteCorreoResponse")]
        bool ExisteCorreo(string correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestionCuentaServicio/ExisteCorreo", ReplyAction="http://tempuri.org/IGestionCuentaServicio/ExisteCorreoResponse")]
        System.Threading.Tasks.Task<bool> ExisteCorreoAsync(string correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestionCuentaServicio/ExisteNombreUsuario", ReplyAction="http://tempuri.org/IGestionCuentaServicio/ExisteNombreUsuarioResponse")]
        bool ExisteNombreUsuario(string nombreUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestionCuentaServicio/ExisteNombreUsuario", ReplyAction="http://tempuri.org/IGestionCuentaServicio/ExisteNombreUsuarioResponse")]
        System.Threading.Tasks.Task<bool> ExisteNombreUsuarioAsync(string nombreUsuario);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGestionCuentaServicioChannel : trofeoCazador.ServicioDelJuego.IGestionCuentaServicio, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GestionCuentaServicioClient : System.ServiceModel.ClientBase<trofeoCazador.ServicioDelJuego.IGestionCuentaServicio>, trofeoCazador.ServicioDelJuego.IGestionCuentaServicio {
        
        public GestionCuentaServicioClient() {
        }
        
        public GestionCuentaServicioClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GestionCuentaServicioClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GestionCuentaServicioClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GestionCuentaServicioClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AgregarJugador(trofeoCazador.ServicioDelJuego.JugadorDataContract jugador) {
            return base.Channel.AgregarJugador(jugador);
        }
        
        public System.Threading.Tasks.Task<bool> AgregarJugadorAsync(trofeoCazador.ServicioDelJuego.JugadorDataContract jugador) {
            return base.Channel.AgregarJugadorAsync(jugador);
        }
        
        public bool EditarContraseña(string correo, string nuevaContraseña) {
            return base.Channel.EditarContraseña(correo, nuevaContraseña);
        }
        
        public System.Threading.Tasks.Task<bool> EditarContraseñaAsync(string correo, string nuevaContraseña) {
            return base.Channel.EditarContraseñaAsync(correo, nuevaContraseña);
        }
        
        public trofeoCazador.ServicioDelJuego.JugadorDataContract ValidarInicioSesion(string nombreUsuario, string contraseniaHash) {
            return base.Channel.ValidarInicioSesion(nombreUsuario, contraseniaHash);
        }
        
        public System.Threading.Tasks.Task<trofeoCazador.ServicioDelJuego.JugadorDataContract> ValidarInicioSesionAsync(string nombreUsuario, string contraseniaHash) {
            return base.Channel.ValidarInicioSesionAsync(nombreUsuario, contraseniaHash);
        }
        
        public trofeoCazador.ServicioDelJuego.JugadorDataContract ObtenerJugador(int idJugador) {
            return base.Channel.ObtenerJugador(idJugador);
        }
        
        public System.Threading.Tasks.Task<trofeoCazador.ServicioDelJuego.JugadorDataContract> ObtenerJugadorAsync(int idJugador) {
            return base.Channel.ObtenerJugadorAsync(idJugador);
        }
        
        public bool EditarNombreUsuario(int idJugador, string nuevoNombreUsuario) {
            return base.Channel.EditarNombreUsuario(idJugador, nuevoNombreUsuario);
        }
        
        public System.Threading.Tasks.Task<bool> EditarNombreUsuarioAsync(int idJugador, string nuevoNombreUsuario) {
            return base.Channel.EditarNombreUsuarioAsync(idJugador, nuevoNombreUsuario);
        }
        
        public bool EditarCorreo(int idCuenta, string nuevoCorreo) {
            return base.Channel.EditarCorreo(idCuenta, nuevoCorreo);
        }
        
        public System.Threading.Tasks.Task<bool> EditarCorreoAsync(int idCuenta, string nuevoCorreo) {
            return base.Channel.EditarCorreoAsync(idCuenta, nuevoCorreo);
        }
        
        public string EnviarCodigoConfirmacion(string correo) {
            return base.Channel.EnviarCodigoConfirmacion(correo);
        }
        
        public System.Threading.Tasks.Task<string> EnviarCodigoConfirmacionAsync(string correo) {
            return base.Channel.EnviarCodigoConfirmacionAsync(correo);
        }
        
        public bool ValidarCodigo(string codigoIngresado, string codigoEnviado) {
            return base.Channel.ValidarCodigo(codigoIngresado, codigoEnviado);
        }
        
        public System.Threading.Tasks.Task<bool> ValidarCodigoAsync(string codigoIngresado, string codigoEnviado) {
            return base.Channel.ValidarCodigoAsync(codigoIngresado, codigoEnviado);
        }
        
        public bool ExisteCorreo(string correo) {
            return base.Channel.ExisteCorreo(correo);
        }
        
        public System.Threading.Tasks.Task<bool> ExisteCorreoAsync(string correo) {
            return base.Channel.ExisteCorreoAsync(correo);
        }
        
        public bool ExisteNombreUsuario(string nombreUsuario) {
            return base.Channel.ExisteNombreUsuario(nombreUsuario);
        }
        
        public System.Threading.Tasks.Task<bool> ExisteNombreUsuarioAsync(string nombreUsuario) {
            return base.Channel.ExisteNombreUsuarioAsync(nombreUsuario);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioDelJuego.ILobbyManager", CallbackContract=typeof(trofeoCazador.ServicioDelJuego.ILobbyManagerCallback))]
    public interface ILobbyManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/CreateLobby")]
        void CreateLobby(trofeoCazador.ServicioDelJuego.LobbyPlayer jugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/CreateLobby")]
        System.Threading.Tasks.Task CreateLobbyAsync(trofeoCazador.ServicioDelJuego.LobbyPlayer jugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/JoinLobby")]
        void JoinLobby(string lobbyCode, trofeoCazador.ServicioDelJuego.LobbyPlayer lobbyPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/JoinLobby")]
        System.Threading.Tasks.Task JoinLobbyAsync(string lobbyCode, trofeoCazador.ServicioDelJuego.LobbyPlayer lobbyPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/JoinLobbyAsHost")]
        void JoinLobbyAsHost(string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/JoinLobbyAsHost")]
        System.Threading.Tasks.Task JoinLobbyAsHostAsync(string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/ExitLobby", ReplyAction="http://tempuri.org/ILobbyManager/ExitLobbyResponse")]
        void ExitLobby(string lobbyCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/ExitLobby", ReplyAction="http://tempuri.org/ILobbyManager/ExitLobbyResponse")]
        System.Threading.Tasks.Task ExitLobbyAsync(string lobbyCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/SendMessage", ReplyAction="http://tempuri.org/ILobbyManager/SendMessageResponse")]
        void SendMessage(string mensaje);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/SendMessage", ReplyAction="http://tempuri.org/ILobbyManager/SendMessageResponse")]
        System.Threading.Tasks.Task SendMessageAsync(string mensaje);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/BuscarLobbyDisponible", ReplyAction="http://tempuri.org/ILobbyManager/BuscarLobbyDisponibleResponse")]
        string BuscarLobbyDisponible();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/BuscarLobbyDisponible", ReplyAction="http://tempuri.org/ILobbyManager/BuscarLobbyDisponibleResponse")]
        System.Threading.Tasks.Task<string> BuscarLobbyDisponibleAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/StartGame")]
        void StartGame(string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/StartGame")]
        System.Threading.Tasks.Task StartGameAsync(string lobbyCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/NotifyLobbyCreated", ReplyAction="http://tempuri.org/ILobbyManager/NotifyLobbyCreatedResponse")]
        void NotifyLobbyCreated(string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/NotifyPlayersInLobby", ReplyAction="http://tempuri.org/ILobbyManager/NotifyPlayersInLobbyResponse")]
        void NotifyPlayersInLobby(string lobbyCode, trofeoCazador.ServicioDelJuego.LobbyPlayer[] lobbyPlayers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/NotifyPlayerJoinToLobby", ReplyAction="http://tempuri.org/ILobbyManager/NotifyPlayerJoinToLobbyResponse")]
        void NotifyPlayerJoinToLobby(trofeoCazador.ServicioDelJuego.LobbyPlayer lobbyPlayer, int numOfPlayersInLobby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/NotifyPlayerLeftLobby", ReplyAction="http://tempuri.org/ILobbyManager/NotifyPlayerLeftLobbyResponse")]
        void NotifyPlayerLeftLobby(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/NotifyHostPlayerLeftLobby", ReplyAction="http://tempuri.org/ILobbyManager/NotifyHostPlayerLeftLobbyResponse")]
        void NotifyHostPlayerLeftLobby();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/NotifyStartMatch", ReplyAction="http://tempuri.org/ILobbyManager/NotifyStartMatchResponse")]
        void NotifyStartMatch(trofeoCazador.ServicioDelJuego.LobbyPlayer[] jugadores);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/NotifyLobbyIsFull", ReplyAction="http://tempuri.org/ILobbyManager/NotifyLobbyIsFullResponse")]
        void NotifyLobbyIsFull();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/NotifyLobbyDoesNotExist", ReplyAction="http://tempuri.org/ILobbyManager/NotifyLobbyDoesNotExistResponse")]
        void NotifyLobbyDoesNotExist();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/NotifyExpulsedFromLobby", ReplyAction="http://tempuri.org/ILobbyManager/NotifyExpulsedFromLobbyResponse")]
        void NotifyExpulsedFromLobby();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/ReceiveMessage", ReplyAction="http://tempuri.org/ILobbyManager/ReceiveMessageResponse")]
        void ReceiveMessage(string username, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/NotifyCanStartGame", ReplyAction="http://tempuri.org/ILobbyManager/NotifyCanStartGameResponse")]
        void NotifyCanStartGame(bool canStart);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyManagerChannel : trofeoCazador.ServicioDelJuego.ILobbyManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyManagerClient : System.ServiceModel.DuplexClientBase<trofeoCazador.ServicioDelJuego.ILobbyManager>, trofeoCazador.ServicioDelJuego.ILobbyManager {
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void CreateLobby(trofeoCazador.ServicioDelJuego.LobbyPlayer jugador) {
            base.Channel.CreateLobby(jugador);
        }
        
        public System.Threading.Tasks.Task CreateLobbyAsync(trofeoCazador.ServicioDelJuego.LobbyPlayer jugador) {
            return base.Channel.CreateLobbyAsync(jugador);
        }
        
        public void JoinLobby(string lobbyCode, trofeoCazador.ServicioDelJuego.LobbyPlayer lobbyPlayer) {
            base.Channel.JoinLobby(lobbyCode, lobbyPlayer);
        }
        
        public System.Threading.Tasks.Task JoinLobbyAsync(string lobbyCode, trofeoCazador.ServicioDelJuego.LobbyPlayer lobbyPlayer) {
            return base.Channel.JoinLobbyAsync(lobbyCode, lobbyPlayer);
        }
        
        public void JoinLobbyAsHost(string lobbyCode) {
            base.Channel.JoinLobbyAsHost(lobbyCode);
        }
        
        public System.Threading.Tasks.Task JoinLobbyAsHostAsync(string lobbyCode) {
            return base.Channel.JoinLobbyAsHostAsync(lobbyCode);
        }
        
        public void ExitLobby(string lobbyCode, string username) {
            base.Channel.ExitLobby(lobbyCode, username);
        }
        
        public System.Threading.Tasks.Task ExitLobbyAsync(string lobbyCode, string username) {
            return base.Channel.ExitLobbyAsync(lobbyCode, username);
        }
        
        public void SendMessage(string mensaje) {
            base.Channel.SendMessage(mensaje);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string mensaje) {
            return base.Channel.SendMessageAsync(mensaje);
        }
        
        public string BuscarLobbyDisponible() {
            return base.Channel.BuscarLobbyDisponible();
        }
        
        public System.Threading.Tasks.Task<string> BuscarLobbyDisponibleAsync() {
            return base.Channel.BuscarLobbyDisponibleAsync();
        }
        
        public void StartGame(string lobbyCode) {
            base.Channel.StartGame(lobbyCode);
        }
        
        public System.Threading.Tasks.Task StartGameAsync(string lobbyCode) {
            return base.Channel.StartGameAsync(lobbyCode);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioDelJuego.IGestorAmistad")]
    public interface IGestorAmistad {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestorAmistad/GetListUsernameFriends", ReplyAction="http://tempuri.org/IGestorAmistad/GetListUsernameFriendsResponse")]
        string[] GetListUsernameFriends(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestorAmistad/GetListUsernameFriends", ReplyAction="http://tempuri.org/IGestorAmistad/GetListUsernameFriendsResponse")]
        System.Threading.Tasks.Task<string[]> GetListUsernameFriendsAsync(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestorAmistad/ValidateFriendRequestSending", ReplyAction="http://tempuri.org/IGestorAmistad/ValidateFriendRequestSendingResponse")]
        bool ValidateFriendRequestSending(int idPlayerSender, string usernamePlayerRequested);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestorAmistad/ValidateFriendRequestSending", ReplyAction="http://tempuri.org/IGestorAmistad/ValidateFriendRequestSendingResponse")]
        System.Threading.Tasks.Task<bool> ValidateFriendRequestSendingAsync(int idPlayerSender, string usernamePlayerRequested);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestorAmistad/AddRequestFriendship", ReplyAction="http://tempuri.org/IGestorAmistad/AddRequestFriendshipResponse")]
        int AddRequestFriendship(int idPlayerSender, string usernamePlayerRequested);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestorAmistad/AddRequestFriendship", ReplyAction="http://tempuri.org/IGestorAmistad/AddRequestFriendshipResponse")]
        System.Threading.Tasks.Task<int> AddRequestFriendshipAsync(int idPlayerSender, string usernamePlayerRequested);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestorAmistad/GetUsernamePlayersRequesters", ReplyAction="http://tempuri.org/IGestorAmistad/GetUsernamePlayersRequestersResponse")]
        string[] GetUsernamePlayersRequesters(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestorAmistad/GetUsernamePlayersRequesters", ReplyAction="http://tempuri.org/IGestorAmistad/GetUsernamePlayersRequestersResponse")]
        System.Threading.Tasks.Task<string[]> GetUsernamePlayersRequestersAsync(int idPlayer);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGestorAmistadChannel : trofeoCazador.ServicioDelJuego.IGestorAmistad, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GestorAmistadClient : System.ServiceModel.ClientBase<trofeoCazador.ServicioDelJuego.IGestorAmistad>, trofeoCazador.ServicioDelJuego.IGestorAmistad {
        
        public GestorAmistadClient() {
        }
        
        public GestorAmistadClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GestorAmistadClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GestorAmistadClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GestorAmistadClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetListUsernameFriends(int idPlayer) {
            return base.Channel.GetListUsernameFriends(idPlayer);
        }
        
        public System.Threading.Tasks.Task<string[]> GetListUsernameFriendsAsync(int idPlayer) {
            return base.Channel.GetListUsernameFriendsAsync(idPlayer);
        }
        
        public bool ValidateFriendRequestSending(int idPlayerSender, string usernamePlayerRequested) {
            return base.Channel.ValidateFriendRequestSending(idPlayerSender, usernamePlayerRequested);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateFriendRequestSendingAsync(int idPlayerSender, string usernamePlayerRequested) {
            return base.Channel.ValidateFriendRequestSendingAsync(idPlayerSender, usernamePlayerRequested);
        }
        
        public int AddRequestFriendship(int idPlayerSender, string usernamePlayerRequested) {
            return base.Channel.AddRequestFriendship(idPlayerSender, usernamePlayerRequested);
        }
        
        public System.Threading.Tasks.Task<int> AddRequestFriendshipAsync(int idPlayerSender, string usernamePlayerRequested) {
            return base.Channel.AddRequestFriendshipAsync(idPlayerSender, usernamePlayerRequested);
        }
        
        public string[] GetUsernamePlayersRequesters(int idPlayer) {
            return base.Channel.GetUsernamePlayersRequesters(idPlayer);
        }
        
        public System.Threading.Tasks.Task<string[]> GetUsernamePlayersRequestersAsync(int idPlayer) {
            return base.Channel.GetUsernamePlayersRequestersAsync(idPlayer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioDelJuego.IGestorDeSolicitudesDeAmistad", CallbackContract=typeof(trofeoCazador.ServicioDelJuego.IGestorDeSolicitudesDeAmistadCallback))]
    public interface IGestorDeSolicitudesDeAmistad {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGestorDeSolicitudesDeAmistad/AddToOnlineFriendshipDictionary")]
        void AddToOnlineFriendshipDictionary(string usernameCurrentPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGestorDeSolicitudesDeAmistad/AddToOnlineFriendshipDictionary")]
        System.Threading.Tasks.Task AddToOnlineFriendshipDictionaryAsync(string usernameCurrentPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGestorDeSolicitudesDeAmistad/SendFriendRequest")]
        void SendFriendRequest(string usernamePlayerSender, string usernamePlayerRequested);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGestorDeSolicitudesDeAmistad/SendFriendRequest")]
        System.Threading.Tasks.Task SendFriendRequestAsync(string usernamePlayerSender, string usernamePlayerRequested);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGestorDeSolicitudesDeAmistad/AcceptFriendRequest")]
        void AcceptFriendRequest(int idPlayerRequested, string usernamePlayerRequested, string usernamePlayerSender);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGestorDeSolicitudesDeAmistad/AcceptFriendRequest")]
        System.Threading.Tasks.Task AcceptFriendRequestAsync(int idPlayerRequested, string usernamePlayerRequested, string usernamePlayerSender);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGestorDeSolicitudesDeAmistad/RejectFriendRequest")]
        void RejectFriendRequest(int idCurrentPlayer, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGestorDeSolicitudesDeAmistad/RejectFriendRequest")]
        System.Threading.Tasks.Task RejectFriendRequestAsync(int idCurrentPlayer, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGestorDeSolicitudesDeAmistad/DeleteFriend")]
        void DeleteFriend(int idCurrentPlayer, string usernameCurrentPlayer, string usernameFriendDeleted);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGestorDeSolicitudesDeAmistad/DeleteFriend")]
        System.Threading.Tasks.Task DeleteFriendAsync(int idCurrentPlayer, string usernameCurrentPlayer, string usernameFriendDeleted);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGestorDeSolicitudesDeAmistad/RemoveFromOnlineFriendshipDictio" +
            "nary")]
        void RemoveFromOnlineFriendshipDictionary(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGestorDeSolicitudesDeAmistad/RemoveFromOnlineFriendshipDictio" +
            "nary")]
        System.Threading.Tasks.Task RemoveFromOnlineFriendshipDictionaryAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGestorDeSolicitudesDeAmistadCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestorDeSolicitudesDeAmistad/NotifyNewFriendRequest", ReplyAction="http://tempuri.org/IGestorDeSolicitudesDeAmistad/NotifyNewFriendRequestResponse")]
        void NotifyNewFriendRequest(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestorDeSolicitudesDeAmistad/NotifyFriendRequestAccepted", ReplyAction="http://tempuri.org/IGestorDeSolicitudesDeAmistad/NotifyFriendRequestAcceptedRespo" +
            "nse")]
        void NotifyFriendRequestAccepted(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestorDeSolicitudesDeAmistad/NotifyDeletedFriend", ReplyAction="http://tempuri.org/IGestorDeSolicitudesDeAmistad/NotifyDeletedFriendResponse")]
        void NotifyDeletedFriend(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGestorDeSolicitudesDeAmistadChannel : trofeoCazador.ServicioDelJuego.IGestorDeSolicitudesDeAmistad, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GestorDeSolicitudesDeAmistadClient : System.ServiceModel.DuplexClientBase<trofeoCazador.ServicioDelJuego.IGestorDeSolicitudesDeAmistad>, trofeoCazador.ServicioDelJuego.IGestorDeSolicitudesDeAmistad {
        
        public GestorDeSolicitudesDeAmistadClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GestorDeSolicitudesDeAmistadClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GestorDeSolicitudesDeAmistadClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GestorDeSolicitudesDeAmistadClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GestorDeSolicitudesDeAmistadClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void AddToOnlineFriendshipDictionary(string usernameCurrentPlayer) {
            base.Channel.AddToOnlineFriendshipDictionary(usernameCurrentPlayer);
        }
        
        public System.Threading.Tasks.Task AddToOnlineFriendshipDictionaryAsync(string usernameCurrentPlayer) {
            return base.Channel.AddToOnlineFriendshipDictionaryAsync(usernameCurrentPlayer);
        }
        
        public void SendFriendRequest(string usernamePlayerSender, string usernamePlayerRequested) {
            base.Channel.SendFriendRequest(usernamePlayerSender, usernamePlayerRequested);
        }
        
        public System.Threading.Tasks.Task SendFriendRequestAsync(string usernamePlayerSender, string usernamePlayerRequested) {
            return base.Channel.SendFriendRequestAsync(usernamePlayerSender, usernamePlayerRequested);
        }
        
        public void AcceptFriendRequest(int idPlayerRequested, string usernamePlayerRequested, string usernamePlayerSender) {
            base.Channel.AcceptFriendRequest(idPlayerRequested, usernamePlayerRequested, usernamePlayerSender);
        }
        
        public System.Threading.Tasks.Task AcceptFriendRequestAsync(int idPlayerRequested, string usernamePlayerRequested, string usernamePlayerSender) {
            return base.Channel.AcceptFriendRequestAsync(idPlayerRequested, usernamePlayerRequested, usernamePlayerSender);
        }
        
        public void RejectFriendRequest(int idCurrentPlayer, string username) {
            base.Channel.RejectFriendRequest(idCurrentPlayer, username);
        }
        
        public System.Threading.Tasks.Task RejectFriendRequestAsync(int idCurrentPlayer, string username) {
            return base.Channel.RejectFriendRequestAsync(idCurrentPlayer, username);
        }
        
        public void DeleteFriend(int idCurrentPlayer, string usernameCurrentPlayer, string usernameFriendDeleted) {
            base.Channel.DeleteFriend(idCurrentPlayer, usernameCurrentPlayer, usernameFriendDeleted);
        }
        
        public System.Threading.Tasks.Task DeleteFriendAsync(int idCurrentPlayer, string usernameCurrentPlayer, string usernameFriendDeleted) {
            return base.Channel.DeleteFriendAsync(idCurrentPlayer, usernameCurrentPlayer, usernameFriendDeleted);
        }
        
        public void RemoveFromOnlineFriendshipDictionary(string username) {
            base.Channel.RemoveFromOnlineFriendshipDictionary(username);
        }
        
        public System.Threading.Tasks.Task RemoveFromOnlineFriendshipDictionaryAsync(string username) {
            return base.Channel.RemoveFromOnlineFriendshipDictionaryAsync(username);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioDelJuego.IGestorUsuariosConectados", CallbackContract=typeof(trofeoCazador.ServicioDelJuego.IGestorUsuariosConectadosCallback))]
    public interface IGestorUsuariosConectados {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGestorUsuariosConectados/RegisterUserToOnlineUsers")]
        void RegisterUserToOnlineUsers(int idPlayer, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGestorUsuariosConectados/RegisterUserToOnlineUsers")]
        System.Threading.Tasks.Task RegisterUserToOnlineUsersAsync(int idPlayer, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGestorUsuariosConectados/UnregisterUserToOnlineUsers")]
        void UnregisterUserToOnlineUsers(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGestorUsuariosConectados/UnregisterUserToOnlineUsers")]
        System.Threading.Tasks.Task UnregisterUserToOnlineUsersAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGestorUsuariosConectadosCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestorUsuariosConectados/NotifyUserLoggedIn", ReplyAction="http://tempuri.org/IGestorUsuariosConectados/NotifyUserLoggedInResponse")]
        void NotifyUserLoggedIn(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestorUsuariosConectados/NotifyUserLoggedOut", ReplyAction="http://tempuri.org/IGestorUsuariosConectados/NotifyUserLoggedOutResponse")]
        void NotifyUserLoggedOut(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGestorUsuariosConectados/NotifyOnlineFriends", ReplyAction="http://tempuri.org/IGestorUsuariosConectados/NotifyOnlineFriendsResponse")]
        void NotifyOnlineFriends(string[] onlineUsernames);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGestorUsuariosConectadosChannel : trofeoCazador.ServicioDelJuego.IGestorUsuariosConectados, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GestorUsuariosConectadosClient : System.ServiceModel.DuplexClientBase<trofeoCazador.ServicioDelJuego.IGestorUsuariosConectados>, trofeoCazador.ServicioDelJuego.IGestorUsuariosConectados {
        
        public GestorUsuariosConectadosClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GestorUsuariosConectadosClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GestorUsuariosConectadosClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GestorUsuariosConectadosClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GestorUsuariosConectadosClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterUserToOnlineUsers(int idPlayer, string username) {
            base.Channel.RegisterUserToOnlineUsers(idPlayer, username);
        }
        
        public System.Threading.Tasks.Task RegisterUserToOnlineUsersAsync(int idPlayer, string username) {
            return base.Channel.RegisterUserToOnlineUsersAsync(idPlayer, username);
        }
        
        public void UnregisterUserToOnlineUsers(string username) {
            base.Channel.UnregisterUserToOnlineUsers(username);
        }
        
        public System.Threading.Tasks.Task UnregisterUserToOnlineUsersAsync(string username) {
            return base.Channel.UnregisterUserToOnlineUsersAsync(username);
        }
    }
}
